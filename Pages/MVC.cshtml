@page
@model Kouris_CISS243_Lab2_1.Pages.MVCModel
@{
    ViewData["Title"] = "Model, View, Controller";
}
<h2 class="header" id="mvc">ASP.NET MVC</h2>
<p>
    MVC stands for Model, View, Controller it is a newer altrernative to Forms. Where forms allowed developers to code against predetermined controls that compiled HTML,
    MVC allows develpers more control over all of their code.<a class="link" href="https://www.tutorialspoint.com/asp.net_mvc/asp.net_mvc_overview.htm">Tutorials Point</a>
</p>
<p>
    In MVC the Model is what contains the logic code, the Controller is what handles and processes user requests, and the view is the user interface.
    The controller acts as the intermediary for the model and the view. This method is much easier on developers because the compartmentalized nature of the framework allows
    for easy division of labor as well as easier access to each set of code to troubleshoot and debug when necessary. MVC is not a complete replacement for Forms but it works
    in tandem with it.<a class="link" href="https://www.c-sharpcorner.com/article/getting-started-with-asp-net-mvc-part-one/">C-sharp Corner</a>
</p>
<p>
    The separation of tasks in MVC also allows for easier scalability of web apps because there is less code to work through in each partition.
    I felt this direct quote from Microsoft was a good summary of this example:
    <br><br>
    &ldquo;Both the view and the controller depend on the model. However, the model depends on neither the view nor the controller. This is one of the key benefits of the separation.
    This separation allows the model to be built and tested independent of the visual presentation.&rdquo;
    <br>
    <a class="link" href="https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-3.1">Microsoft MVC overview</a>
</p>